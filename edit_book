import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class EditBookScreen extends StatefulWidget {
  final String bookId;  // รับค่า id ของหนังสือที่ต้องการแก้ไข

  const EditBookScreen({Key? key, required this.bookId}) : super(key: key);

  @override
  _EditBookScreenState createState() => _EditBookScreenState();
}

class _EditBookScreenState extends State<EditBookScreen> {
  final _formKey = GlobalKey<FormState>();
  String? _id;
  String? _bookName;
  String? _authorName;
  String? _category;
  String? _yearOfPublication;
  String? _isbn;

  // ฟังก์ชั่นเพื่อดึงข้อมูลหนังสือตาม id
  Future<void> _fetchBookData(bookId) async {
    var response = await http.get(Uri.parse('http://localhost:3000/books/${bookId}'));
    if (response.statusCode == 200) {
      var bookData = jsonDecode(response.body);
      setState(() {
        _id = bookData['id'];
        _bookName = bookData['title'];
        _authorName = bookData['author'];
        _category = bookData['category'];
        _yearOfPublication = bookData['yearpubish'];
        _isbn = bookData['isbn'];
      });
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to load book data')),
      );
    }
  }

  // ฟังก์ชั่นเพื่ออัปเดตข้อมูลหนังสือ
  Future<void> _updateBook() async {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();

      Map<String, String> updatedBookData = {
        'title': _bookName!,
        'author': _authorName!,
        'category': _category ?? '',
        'yearpubish': _yearOfPublication ?? '',
        'isbn': _isbn ?? '',
      };

      var response = await http.put(
        Uri.parse('http://localhost:3000/books/${widget.bookId}'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode(updatedBookData),
      );

      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Book updated successfully!')),
        );
        Navigator.pop(context);
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to update book')),
        );
      }
    }
  }

  @override
void initState() {
  super.initState();
  print('Book ID: ${widget.bookId}'); // พิมพ์ค่า bookId ออกมาเพื่อดูว่าถูกส่งมาหรือไม่
  _fetchBookData(widget.bookId); // ดึงข้อมูลหนังสือตาม id ทันทีที่หน้าโหลด
}


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Edit Book"),
      ),
      body: _bookName == null
          ? Center(child: CircularProgressIndicator()) // แสดง loading จนกว่าจะโหลดข้อมูลเสร็จ
          : Form(
              key: _formKey,
              child: SingleChildScrollView(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    TextFormField(
                      initialValue: _bookName,
                      decoration: InputDecoration(labelText: "Book Name"),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter a book name';
                        }
                        return null;
                      },
                      onSaved: (value) {
                        _bookName = value;
                      },
                    ),
                    TextFormField(
                      initialValue: _authorName,
                      decoration: InputDecoration(labelText: "Author Name"),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter an author name';
                        }
                        return null;
                      },
                      onSaved: (value) {
                        _authorName = value;
                      },
                    ),
                    TextFormField(
                      initialValue: _category,
                      decoration: InputDecoration(labelText: "Category"),
                      onSaved: (value) {
                        _category = value;
                      },
                    ),
                    TextFormField(
                      initialValue: _yearOfPublication,
                      decoration: InputDecoration(labelText: "Year of Publication"),
                      onSaved: (value) {
                        _yearOfPublication = value;
                      },
                    ),
                    TextFormField(
                      initialValue: _isbn,
                      decoration: InputDecoration(labelText: "ISBN"),
                      onSaved: (value) {
                        _isbn = value;
                      },
                    ),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        ElevatedButton(
                          child: Text("Save"),
                          onPressed: _updateBook,
                        ),
                        ElevatedButton(
                          child: Text("Cancel"),
                          onPressed: () {
                            Navigator.pop(context);
                          },
                        ),
                      ],
                    )
                  ],
                ),
              ),
            ),
    );
  }
}
